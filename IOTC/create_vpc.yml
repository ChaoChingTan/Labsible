- name: Create and Setup AWS VPC and Networking Components
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - vars/common.yml

  tasks:
    - name: Validate that CIDR block is correct
      assert:
        that:
          - "'/' in (subnet ~ vpc_prefix)"
          - (subnet ~ vpc_prefix) is match("^(\\d{1,3}\\.){3}\\d{1,3}/\\d{1,2}$")
        fail_msg: "Invalid CIDR block '{{ subnet }}{{ vpc_prefix }}' in common.yml! Should be like 10.0.0.0/16"
        success_msg: "CIDR block '{{ subnet }}{{ vpc_prefix }}' looks valid."

    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc }}"
        cidr_block: "{{ subnet }}{{ vpc_prefix }}"
        region: "{{ aws_region }}"
        dns_support: yes
        dns_hostnames: yes
        tags:
          Name: "{{ vpc }}"
      register: vpc_result

    - name: Show VPC ID
      debug:
        msg: "VPC ID is {{ vpc_result.vpc.id }}"

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        state: present
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
          Name: "{{ igw }}"
      register: igw_result

    - name: Get list of PA files
      find:
        paths: "./input"
        patterns: "PA[0-9][0-9]"
        file_type: file
      register: pa_files

    - name: Create public subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_result.vpc.id }}"
        cidr: "{{ subnet | regex_replace('^(\\d+\\.\\d+)\\.\\d+\\.\\d+$', '\\1.' + (item | string) + '.0') + subnet_prefix }}"
        region: "{{ aws_region }}"
        map_public: true
        tags:
          Name: "PublicSubnet-{{ item }}"
      loop: "{{ public_subnet_octets }}"
      loop_control:
        label: "Creating subnet 10.0.{{ item }}.0{{ subnet_prefix }}"
      register: public_subnet_result

    - name: Ensure public route table exists and associate public subnets to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "{{ route_table_public }}"
        routes:
          - dest: "{{ subnet }}{{ vpc_prefix }}"
            gateway_id: local
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_result.gateway_id }}"
        subnets: "{{ public_subnet_result.results | map(attribute='subnet.id') | list }}"
      register: route_table_result      

    - name: Create private subnets for each PA file
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_result.vpc.id }}"
        cidr: "{{ subnet | regex_replace('^(\\d+\\.\\d+)\\.\\d+\\.\\d+$', '\\1.' + item | regex_replace('^PA', '') + '.0') + subnet_prefix }}"
        region: "{{ aws_region }}"
        tags:
          Name: "Subnet-{{ item }}"
      loop: "{{ pa_files.files | map(attribute='path') | map('basename') | list }}"
      register: private_subnet_result

    - name: Get existing Elastic IPs with Name=lab_natgw
      amazon.aws.ec2_eip_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ nat_gw }}"
      register: existing_eips

    - name: Allocate EIP only if not existing
      amazon.aws.ec2_eip:
        in_vpc: true
        state: present
        region: "{{ aws_region }}"
        tags:
          Name: "{{ nat_gw }}"
      when: existing_eips.addresses | length == 0
      register: nat_eip

    - name: Set EIP allocation ID fact (existing or new)
      set_fact:
        nat_eip_allocation_id: >-
          {{
            (existing_eips.addresses[0].allocation_id
            if existing_eips.addresses | length > 0
            else nat_eip.allocation_id)
          }}

    - name: Get existing NAT Gateways
      amazon.aws.ec2_vpc_nat_gateway_info:
        region: "{{ aws_region }}"
        filters:
          "subnet-id": "{{ public_subnet_result.results[0].subnet.id }}"
          "state": ["available", "pending"]
      register: existing_nat_gws

    - name: Create NAT Gateway only if not existing
      amazon.aws.ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnet_result.results[0].subnet.id }}"
        allocation_id: "{{ nat_eip_allocation_id }}"
        state: present
        region: "{{ aws_region }}"
        wait: true
        tags:
          Name: "{{ nat_gw }}"
      when: existing_nat_gws.result | length == 0
      register: nat_gw_result

    - name: Query NAT Gateway after creation
      amazon.aws.ec2_vpc_nat_gateway_info:
        region: "{{ aws_region }}"
        filters:
          "subnet-id": "{{ public_subnet_result.results[0].subnet.id }}"
          "state": ["available", "pending"]
      register: nat_gw_info

    - name: Debug NAT Gateway info after creation
      debug:
        var: nat_gw_info

    - name: Set NAT Gateway ID fact reliably
      set_fact:
        nat_gateway_id: "{{ nat_gw_info.result[0].nat_gateway_id }}"

    - name: debugger
      debug:
        var: nat_gateway_id

    - name: Ensure private route table exists and associate private subnets to private route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "{{ route_table_private }}"
        routes:
          - dest: "{{ subnet }}{{ vpc_prefix }}"
            gateway_id: local
          - dest: "0.0.0.0/0"
            nat_gateway_id: "{{ nat_gateway_id }}"
        subnets: "{{ private_subnet_result.results | map(attribute='subnet.id') | list }}"
      register: private_route_table_result

